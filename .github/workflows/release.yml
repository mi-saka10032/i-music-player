name: 'Release'

on:
  push:
    tags:
      - 'v*'  # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
  workflow_dispatch:

jobs:
  # 任务1：创建 release 草稿draft版本
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      # 安装 Node.js
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      # 查询版本号
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      # 根据查询到的版本号创建 release_id
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `I Music Player v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  # 任务2：编译并构建多平台 Tauri，回传draft
  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      # 多平台
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 预安装Ubuntu平台特需依赖
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      # 安装 Rust
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      # 使用 Rust 缓存，加快安装速度
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # 安装 pnpm
      - uses: pnpm/action-setup@v2
        with:
          version: 8

      # 同步Node与包管理器 设置pnpm缓存
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: Setup git
        run: |
          git config --global url."https://".insteadOf git://
          git config --global url."https://".insteadOf ssh://

      # 安装前端依赖
      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # Change this to npm, yarn or pnpm.

      # 打包应用 回传draft
      - name: Build The App
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  # 任务3：发布 release 草稿draft版本     
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })